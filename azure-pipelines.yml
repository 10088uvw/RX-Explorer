# Universal Windows Platform
# Build a Universal Windows Platform project using Visual Studio.
# Add steps that test and distribute an app, save build artifacts, and more:
# https://aka.ms/yaml

pr:
  autoCancel: true
  branches:
    include:
      - master

variables:
  - group: UWP-PipeLineVariable
  - name: buildProject
    value: "Package"
  - name: solution
    value: "**/*.sln"
  - name: buildPlatform
    value: "x64|ARM64"
  - name: buildConfiguration
    value: "Release"
  - name: SideLoadPackageDir
    value: '$(build.artifactStagingDirectory)\SideLoad\\'
  - name: CIPackageDir
    value: '$(build.artifactStagingDirectory)\CI\\'
  - name: WindowsLatestSDKUrl
    value: "https://download.microsoft.com/download/f/6/7/f673df4b-4df9-4e1c-b6ce-2e6b4236c802/windowssdk/winsdksetup.exe"
  - name: WindowsSDKBaseLocation
    value: '$(Agent.TempDirectory)\WinSDK'
  - name: WindowsSDKInstallerLocation
    value: '$(Agent.TempDirectory)\WinSDK\winsdksetup.exe'

jobs:
  - job: CIBuild
    timeoutInMinutes: 0
    pool:
      vmImage: "windows-latest"
    steps:
      # UseDotNet@2 task to install .Net 6 environment because Azure Pipeline would not prepare the SDK we needed.
      # Maybe we could remove this task once Azure Pipeline install .Net 6 SDK by default.
      - task: UseDotNet@2
        displayName: "Install .Net 6 SDK"
        inputs:
          packageType: sdk
          installationPath: $(Agent.TempDirectory)
          version: 6.x

      # Windows SDK 10.0.22621 is not pre-installed currently
      - task: PowerShell@2
        displayName: "Download And Install Latest Windows SDK"
        inputs:
          targetType: "inline"
          script: |
            New-Item -Path $(WindowsSDKBaseLocation) -ItemType Directory
            Start-BitsTransfer -Source $(WindowsLatestSDKUrl) -Destination $(WindowsSDKInstallerLocation);
            Start-Process $(WindowsSDKInstallerLocation) -ArgumentList "/q" -Wait

      - task: DownloadSecureFile@1
        name: secureFile
        displayName: "Download CA Certificate"
        inputs:
          secureFile: "$(signingCert.secureFileName)"

      - task: PowerShell@2
        displayName: "Adding PFX file to the certificate store"
        inputs:
          targetType: "inline"
          script: |
            Write-Host "Start adding the PFX file to the certificate store."

            $pfxpath = '$(secureFile.secureFilePath)'
            $password = '$(signingCert.password)'      

            Add-Type -AssemblyName System.Security
            $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
            $cert.Import($pfxpath, $password, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::PersistKeySet)
            $store = new-object system.security.cryptography.X509Certificates.X509Store -argumentlist "MY", CurrentUser
            $store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]"ReadWrite")
            $store.Add($cert)
            $store.Close()

      - task: PowerShell@2
        displayName: "Adding AppCenter Secret Value"
        inputs:
          targetType: "inline"
          script: |
            Write-Host "Start adding AppCenter Secret Value."

            $secret = '$(appCenter.secret)'
            $outputPath = '$(Build.SourcesDirectory)\RX_Explorer\Assets\AppCenterSecret.txt'

            $secret | Out-File -Encoding utf8 -FilePath $outputPath

      - task: NuGetToolInstaller@1

      - task: NuGetCommand@2
        inputs:
          restoreSolution: "$(solution)"

      - task: VSBuild@1
        displayName: "Build RX-Explorer"
        inputs:
          solution: "$(solution)"
          msbuildArgs: '/t:$(buildProject):Rebuild /p:PreferredToolArchitecture="x64" /p:AppxBundlePlatforms="$(buildPlatform)" /p:AppxPackageDir="$(CIPackageDir)" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=CI /p:AppxPackageSigningEnabled=true /p:PackageCertificateThumbprint="$(signingCert.thumbprint)" /p:PackageCertificateKeyFile="$(secureFile.secureFilePath)" /p:PackageCertificatePassword="$(signingCert.password)"'
          configuration: "$(buildConfiguration)"
          clean: true
          msbuildArchitecture: "x64"

      - task: PublishBuildArtifacts@1
        displayName: "Publish Artifact: CIBuild"
        inputs:
          ArtifactName: "CIBuild_Publish"
          PathtoPublish: "$(CIPackageDir)"

  - job: SideLoadBuild
    timeoutInMinutes: 0
    pool:
      vmImage: "windows-latest"
    steps:
      # UseDotNet@2 task to install .Net 6 environment because Azure Pipeline would not prepare the SDK we needed.
      # Maybe we could remove this task once Azure Pipeline install .Net 6 SDK by default.
      - task: UseDotNet@2
        displayName: "Install .Net 6 SDK"
        inputs:
          packageType: sdk
          installationPath: $(Agent.TempDirectory)
          version: 6.x

      # Windows SDK 10.0.22621 is not pre-installed currently
      - task: PowerShell@2
        displayName: "Download And Install Latest Windows SDK"
        inputs:
          targetType: "inline"
          script: |
            New-Item -Path $(WindowsSDKBaseLocation) -ItemType Directory
            Start-BitsTransfer -Source $(WindowsLatestSDKUrl) -Destination $(WindowsSDKInstallerLocation);
            Start-Process $(WindowsSDKInstallerLocation) -ArgumentList "/q" -Wait

      - task: DownloadSecureFile@1
        name: secureFile
        displayName: "Download CA Certificate"
        inputs:
          secureFile: "$(signingCert.secureFileName)"

      - task: PowerShell@2
        displayName: "Adding PFX file to the certificate store"
        inputs:
          targetType: "inline"
          script: |
            Write-Host "Start adding the PFX file to the certificate store."

            $pfxpath = '$(secureFile.secureFilePath)'
            $password = '$(signingCert.password)'      

            Add-Type -AssemblyName System.Security
            $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
            $cert.Import($pfxpath, $password, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::PersistKeySet)
            $store = new-object system.security.cryptography.X509Certificates.X509Store -argumentlist "MY", CurrentUser
            $store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]"ReadWrite")
            $store.Add($cert)
            $store.Close()

      - task: PowerShell@2
        displayName: "Adding AppCenter Secret Value"
        inputs:
          targetType: "inline"
          script: |
            Write-Host "Start adding AppCenter Secret Value."

            $secret = '$(appCenter.secret)'
            $outputPath = '$(Build.SourcesDirectory)\RX_Explorer\Assets\AppCenterSecret.txt'

            $secret | Out-File -Encoding utf8 -FilePath $outputPath

      - task: NuGetToolInstaller@1

      - task: NuGetCommand@2
        inputs:
          restoreSolution: "$(solution)"

      - task: VSBuild@1
        displayName: "Build RX-Explorer"
        inputs:
          solution: "$(solution)"
          msbuildArgs: '/t:$(buildProject):Rebuild /p:PreferredToolArchitecture="x64" /p:AppxBundlePlatforms="$(buildPlatform)" /p:AppxPackageDir="$(SideLoadPackageDir)" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=SideloadOnly /p:AppxPackageSigningEnabled=true /p:PackageCertificateThumbprint="$(signingCert.thumbprint)" /p:PackageCertificateKeyFile="$(secureFile.secureFilePath)" /p:PackageCertificatePassword="$(signingCert.password)"'
          configuration: "$(buildConfiguration)"
          clean: true
          restoreNugetPackages: true
          msbuildArchitecture: "x64"

      - task: PublishBuildArtifacts@1
        displayName: "Publish Artifact: SideLoadBuild"
        inputs:
          ArtifactName: "SideLoadBuild_Publish"
          PathtoPublish: "$(SideLoadPackageDir)"
